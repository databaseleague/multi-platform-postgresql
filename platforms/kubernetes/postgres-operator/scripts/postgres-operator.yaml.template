apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{ .namespace }}
  name: {{ .account }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .clusterrole }}
rules:
  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]

  # Framework: admission webhook configuration management.
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [postgres.radondb.io]
    resources: [postgresqls]
    verbs: [list, watch, get, patch, create,]

  - apiGroups: [""]
    resources: [pods, persistentvolumeclaims, services]
    verbs: [create, delete, patch, list, get, update, watch]

  - apiGroups: [""]
    resources: [pods/exec]
    verbs: ["*"]

  - apiGroups: [apps]
    resources: [statefulsets, deployments]
    verbs: [create, delete, patch, list, get, update, watch]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{ .namespace }}
  name: {{ .role }}
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [kopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [postgres.radondb.io]
    resources: [postgresqls]
    verbs: [list, watch, get, patch]

  # Application: other resources it produces and manipulates.
  # Here, we create Jobs+PVCs+Pods, but we do not patch/update/delete them ever.
  #- apiGroups: [batch, extensions]
  #  resources: [jobs]
  #  verbs: [create, delete, patch]
  - apiGroups: [""]
    resources: [pods, persistentvolumeclaims, services]
    verbs: [create, delete, patch, list, get, update, watch]

  - apiGroups: [""]
    resources: [pods/exec]
    verbs: ["*"]

  - apiGroups: [apps]
    resources: [statefulsets, deployments]
    verbs: [create, delete, patch, list, get, update, watch]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .clusterrolebinding }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .clusterrole }}
subjects:
  - kind: ServiceAccount
    name: {{ .account }}
    namespace: {{ .namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: {{ .namespace }}
  name: {{ .rolebinding }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .role }}
subjects:
  - kind: ServiceAccount
    name: {{ .account }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  namespace: {{ .namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      operator-name: radondb-postgres-operator
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        operator-name: radondb-postgres-operator
    spec:
      serviceAccountName: {{ .account }}
      priorityClassName: system-cluster-critical
      containers:
      - name: radondb-postgres-operator
        image: {{ .image }}
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "500Mi"
            cpu: "0.5"
        livenessProbe:
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 60
          failureThreshold: 10
          successThreshold: 1
          httpGet:
            path: /healthz
            port: 8080
        env:
        - name: RADONDB_POSTGRES_OPERATOR_BOOTSTRAP_TIMEOUT
          value: "3600"
        - name: RADONDB_POSTGRES_OPERATOR_BOOTSTRAP_RETRY_DELAY
          value: "60"
        - name: RADONDB_POSTGRES_OPERATOR_TIMER_INTERVAL
          value: "10"
        - name: RADONDB_POSTGRES_OPERATOR_LOG_LEVEL
          value: "INFO"
        - name: RADONDB_POSTGRES_OPERATOR_TESTING
          value: "0"
        - name: RADONDB_POSTGRES_OPERATOR_DATA_PATH
          value: {{ .datapath }}
        - name: RADONDB_POSTGRES_OPERATOR_IMAGE_REGISTRY
          value: {{ .imageRegistry }}
        - name: RADONDB_POSTGRES_OPERATOR_NAMESPACE_OVERRIDE
          value: {{ .namespaceOverride }}
